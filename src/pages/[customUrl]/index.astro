---
import MainLayout from "../../layouts/MainLayout.astro";
import { getBin } from "../../utils/db";
import { parseMarkdown } from "../../utils/markdown";

const { customUrl } = Astro.params;

if (!customUrl) {
  return new Response(null, { status: 404 });
}
const bin = await getBin(customUrl);

if (!bin) {
  return new Response(null, { status: 404 });
}

const clean = await parseMarkdown(bin.content);
const lines = clean.split("\n");
const title = lines[0].replace(/<[^>]*>/g, "");
---

<MainLayout {title} header={false}>
  <Fragment slot="head-scripts">
    <link
      id="hljs-theme-light"
      rel="stylesheet"
      href="/resources/highlight-js/github.min.css"
      media="(prefers-color-scheme: light)"
    />
    <link
      id="hljs-theme-dark"
      rel="stylesheet"
      href="/resources/highlight-js/github-dark.min.css"
      media="(prefers-color-scheme: dark)"
    />
  </Fragment>

  <section
    class="md bg-neutral-200 dark:bg-neutral-800 min-h-[60vh] p-6"
    set:html={clean}
  />
  <section id="buttons" class="flex justify-start mt-4 gap-2">
    <a
      class="px-4 py-2 bg-neutral-200 dark:bg-neutral-800"
      href={`/${customUrl}/raw`}
    >
      Raw
    </a>
    <a
      class="px-4 py-2 bg-neutral-200 dark:bg-neutral-800"
      href={`/${customUrl}/edit`}
    >
      Edit
    </a>
  </section>
</MainLayout>

<script>
  import {
    LUCIDE_ICONS,
    calculateIframeHeight,
    generateIframeCode,
    copyToClipboard,
  } from "../../utils/codeblocks";

  const darkModeMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

  function handleThemeChange(e: MediaQueryListEvent | MediaQueryList) {
    const isDarkMode = e.matches;
    document.querySelectorAll("pre code").forEach((block) => {
      block.classList.toggle("github-dark", isDarkMode);
      block.classList.toggle("github-light", !isDarkMode);
    });
  }

  handleThemeChange(darkModeMediaQuery);

  darkModeMediaQuery.addEventListener("change", handleThemeChange);

  // token
  const main = document.querySelector("main") as HTMLElement;
  const token = sessionStorage.getItem("token");
  let timeout: number;
  if (token) {
    const section = document.createElement("section");
    section.className = "bg-green-600/20 p-4 flex items-center mb-4";
    section.id = "token";
    const p = document.createElement("p");
    p.style.margin = "0px";
    p.textContent = "Your edit token is: ";
    const code = document.createElement("code");
    code.id = "token-code";
    code.textContent = token;
    p.appendChild(code);
    code.onclick = () => {
      navigator.clipboard.writeText(token);
      code.textContent = "Copied!";
      clearTimeout(timeout);
      timeout = window.setTimeout(() => {
        code.textContent = token;
      }, 1000);
    };
    section.appendChild(p);
    main.prepend(section);
    sessionStorage.removeItem("token");
  }

  // code blocks
  document.querySelectorAll(".md pre").forEach((pre, index) => {
    const wrapper = document.createElement("div");
    wrapper.className = "code-block-wrapper";
    pre.parentNode?.insertBefore(wrapper, pre);
    wrapper.appendChild(pre);

    const toolbar = document.createElement("div");
    toolbar.className = "code-toolbar";

    const copyBtn = document.createElement("button");
    copyBtn.className = "code-btn";
    copyBtn.innerHTML = LUCIDE_ICONS.copy;
    copyBtn.title = "Copy code";
    copyBtn.ariaLabel = "Copy code";

    const embedBtn = document.createElement("button");
    embedBtn.className = "code-btn";
    embedBtn.innerHTML = LUCIDE_ICONS.link;
    embedBtn.title = "Copy embed link";
    embedBtn.ariaLabel = "Copy embed link";

    const codeElement = pre.querySelector("code");

    copyBtn.addEventListener("click", async () => {
      const code = codeElement?.textContent || "";
      const success = await copyToClipboard(code);

      if (success) {
        copyBtn.innerHTML = LUCIDE_ICONS.check;
        setTimeout(() => {
          copyBtn.innerHTML = LUCIDE_ICONS.copy;
        }, 1500);
      }
    });

    embedBtn.addEventListener("click", async () => {
      const blockId = `code-block-${index}`;
      pre.id = blockId;

      const codeLines = (codeElement?.textContent || "").split("\n").length;
      const calculatedHeight = calculateIframeHeight(codeLines);
      const embedUrl = `${window.location.origin}${window.location.pathname}/embed/${blockId}`;
      const iframeCode = generateIframeCode(embedUrl, calculatedHeight);

      const success = await copyToClipboard(iframeCode);

      if (success) {
        embedBtn.innerHTML = LUCIDE_ICONS.check;
        setTimeout(() => {
          embedBtn.innerHTML = LUCIDE_ICONS.link;
        }, 1500);
      }
    });

    toolbar.appendChild(copyBtn);
    toolbar.appendChild(embedBtn);
    wrapper.appendChild(toolbar);
  });
</script>
<style is:inline>
  #token-code {
    cursor: pointer;
    margin-left: 0.25rem;
    background: rgba(0, 0, 0, 0.1);
    padding: 0.5rem;
    border-radius: 0.5rem;
  }

  @media (prefers-color-scheme: dark) {
    #token-code {
      background: rgba(0, 0, 0, 0.3);
    }
  }

  .code-block-wrapper {
    position: relative;
    margin: 1em 0;
  }

  .code-toolbar {
    position: absolute;
    top: 8px;
    right: 8px;
    display: flex;
    gap: 4px;
    z-index: 10;
  }

  .code-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    padding: 0;
    border: 1px solid;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
  }

  @media (prefers-color-scheme: light) {
    .code-btn {
      background-color: #ffffff;
      border-color: #d0d7de;
      color: #24292f;
    }

    .code-btn:hover {
      background-color: #f6f8fa;
      border-color: #afb8c1;
    }
  }

  @media (prefers-color-scheme: dark) {
    .code-btn {
      background-color: #0d1117;
      border-color: #30363d;
      color: #e6edf3;
    }

    .code-btn:hover {
      background-color: #161b22;
      border-color: #484f58;
    }
  }

  .md pre {
    border-radius: 6px;
    margin: 0;
    padding: 1em;
    overflow-x: auto;
  }

  .md pre code.hljs {
    display: block;
    padding: 0;
  }

  @media (prefers-color-scheme: light) {
    .md pre {
      background-color: #ffffff;
      border: 1px solid #d0d7de;
    }

    .md pre code.hljs {
      color: #24292f;
    }
  }

  @media (prefers-color-scheme: dark) {
    .md pre {
      background-color: #0d1117;
      border: 1px solid #30363d;
    }

    .md pre code.hljs {
      color: #e6edf3;
    }
  }

  .md code:not(pre code) {
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-size: 85%;
  }

  @media (prefers-color-scheme: light) {
    .md code:not(pre code) {
      background-color: rgba(175, 184, 193, 0.2);
      color: #24292f;
    }
  }

  @media (prefers-color-scheme: dark) {
    .md code:not(pre code) {
      background-color: rgba(110, 118, 129, 0.4);
      color: #e6edf3;
    }
  }
</style>
