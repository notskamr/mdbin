---
import sanitizeHtml from "sanitize-html";
import MainLayout from "../../layouts/MainLayout.astro";
import { getBin } from "../../utils/db";
import { Marked } from "marked";
import { markedHighlight } from "marked-highlight";
import hljs from "highlight.js";

const { customUrl } = Astro.params;

if (!customUrl) {
  return new Response(null, { status: 404 });
}
const bin = await getBin(customUrl);

if (!bin) {
  return new Response(null, { status: 404 });
}

const marked = new Marked(
  markedHighlight({
    emptyLangClass: "hljs",
    langPrefix: "hljs language-",
    highlight(code, lang, info) {
      const language = hljs.getLanguage(lang) ? lang : "plaintext";
      return hljs.highlight(code, { language }).value;
    },
  })
);

const parsed = await marked.parse(bin.content);

const clean = sanitizeHtml(parsed, {
  allowedTags: sanitizeHtml.defaults.allowedTags.concat(["img"]),
  allowedClasses: {
    pre: ["astro-code", "github-dark", "github-light", "hljs"],
    code: ["astro-code", "github-dark", "github-light", "hljs"],
  },
  allowedAttributes: {
    ...sanitizeHtml.defaults.allowedAttributes,
    pre: ["data-language", "style", "tabindex"],
    code: ["data-language", "style"],
    span: ["style"],
    p: ["style"],
    img: ["src", "srcset", "alt", "title", "width", "height", "loading"],
  },
  allowedStyles: {
    "*": {
      color: [
        /^#(0x)?[0-9a-f]+$/i,
        /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/,
      ],
      "background-color": [
        /^#(0x)?[0-9a-f]+$/i,
        /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/,
      ],
      "text-align": [/^left$/, /^right$/, /^center$/],
      "font-size": [/^\d+(?:px|em|%)$/],
      "overflow-x": [/^auto$/, /^scroll$/],
      "overflow-y": [/^auto$/, /^scroll$/],
      overflow: [/^auto$/, /^scroll$/],
    },
  },
});
const lines = clean.split("\n");
const title = lines[0].replace(/<[^>]*>/g, "");
---

<MainLayout {title} header={false}>
  <Fragment slot="head-scripts">
    <link
      id="hljs-theme-light"
      rel="stylesheet"
      href="/resources/highlight-js/github.min.css"
      media="(prefers-color-scheme: light)"
    />
    <link
      id="hljs-theme-dark"
      rel="stylesheet"
      href="/resources/highlight-js/github-dark.min.css"
      media="(prefers-color-scheme: dark)"
    />
  </Fragment>
  <section
    class="md bg-neutral-200 dark:bg-neutral-800 min-h-[60vh] p-6"
    set:html={parsed}
  />
  <section id="buttons" class="flex justify-start mt-4 gap-2">
    <a
      class="px-4 py-2 bg-neutral-200 dark:bg-neutral-800"
      href={`/${customUrl}/raw`}
    >
      Raw
    </a>
    <a
      class="px-4 py-2 bg-neutral-200 dark:bg-neutral-800"
      href={`/${customUrl}/edit`}
    >
      Edit
    </a>
  </section>
</MainLayout>

<script>
  const darkModeMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

  function handleThemeChange(e: MediaQueryListEvent | MediaQueryList) {
    const isDarkMode = e.matches;
    document.querySelectorAll("pre code").forEach((block) => {
      block.classList.toggle("github-dark", isDarkMode);
      block.classList.toggle("github-light", !isDarkMode);
    });
  }

  handleThemeChange(darkModeMediaQuery);

  darkModeMediaQuery.addEventListener("change", handleThemeChange);

  // token
  const main = document.querySelector("main") as HTMLElement;
  const token = sessionStorage.getItem("token");
  let timeout: number;
  if (token) {
    const section = document.createElement("section");
    section.className = "bg-green-600/20 p-4 flex items-center mb-4";
    section.id = "token";
    const p = document.createElement("p");
    p.style.margin = "0px";
    p.textContent = "Your edit token is: ";
    const code = document.createElement("code");
    code.id = "token-code";
    code.textContent = token;
    p.appendChild(code);
    code.onclick = () => {
      navigator.clipboard.writeText(token);
      code.textContent = "Copied!";
      clearTimeout(timeout);
      timeout = window.setTimeout(() => {
        code.textContent = token;
      }, 1000);
    };
    section.appendChild(p);
    main.prepend(section);
    sessionStorage.removeItem("token");
  }
</script>
<style is:inline>
  #token-code {
    cursor: pointer;
    margin-left: 0.25rem;
    background: rgba(0, 0, 0, 0.1);
    padding: 0.5rem;
    border-radius: 0.5rem;
  }

  @media (prefers-color-scheme: dark) {
    #token-code {
      background: rgba(0, 0, 0, 0.3);
    }
  }

  /* Base code block styling */
  pre {
    border-radius: 6px;
    margin: 1em 0;
  }

  pre code.hljs {
    padding: 1em;
    border-radius: 4px;
  }

  /* Ensure proper contrast in light/dark modes */
  @media (prefers-color-scheme: light) {
    .md pre {
      background-color: #f6f8fa;
    }
  }

  @media (prefers-color-scheme: dark) {
    .md pre {
      background-color: #0d1117;
    }
  }
</style>
